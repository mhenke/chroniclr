name: Chroniclr Documentation Generator

on:
  discussion:
    types: [created, edited]

  workflow_dispatch:
    inputs:
      discussion_number:
        description: 'Discussion number to process'
        required: false
        type: string
      source:
        description: 'Data sources (comma-separated: discussion,issues,pr,jira)'
        required: false
        type: string
        default: 'discussion'
      pr_numbers:
        description: 'Pull request numbers (comma-separated, e.g., "123,456")'
        required: false
        type: string
      jira_keys:
        description: 'Jira issue keys (comma-separated, e.g., "PROJ-123,PROJ-456")'
        required: false
        type: string
      issue_numbers:
        description: 'GitHub issue numbers (comma-separated, e.g., "123,456")'
        required: false
        type: string

permissions:
  contents: write
  discussions: read
  pull-requests: write
  models: read

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    concurrency:
      group: chroniclr-docs-${{ github.event_name }}-${{ github.event.discussion.number || github.event.inputs.discussion_number || 'manual' }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Get discussion details
        id: discussion
        uses: actions/github-script@v7
        with:
          script: |
            const discussionNumber = context.payload.discussion?.number || 
                                    context.payload.inputs?.discussion_number;
            const sourceModules = context.payload.inputs?.source || 'discussion';

            // Only require discussion number if 'discussion' is in the source modules
            if (!discussionNumber && sourceModules.includes('discussion')) {
              core.setFailed('Discussion number is required when source includes "discussion"');
              return;
            }

            // Skip discussion processing if no discussion number provided
            if (!discussionNumber) {
              core.info('No discussion number provided - skipping discussion data processing');
              core.setOutput('number', '');
              core.setOutput('title', 'Generated Documentation');
              core.setOutput('body', '');
              core.setOutput('full_content', '');
              core.setOutput('comments_count', 0);
              core.setOutput('labels', '[]');
              core.setOutput('author', 'system');
              core.setOutput('url', '');
              return;
            }

            // Get discussion details
            const { data: discussion } = await github.request(
              'GET /repos/{owner}/{repo}/discussions/{discussion_number}',
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                discussion_number: Number(discussionNumber)
              }
            );

            // Get discussion comments using GraphQL
            const commentsQuery = `
              query($owner: String!, $name: String!, $number: Int!) {
                repository(owner: $owner, name: $name) {
                  discussion(number: $number) {
                    comments(first: 50) {
                      nodes {
                        author {
                          login
                        }
                        body
                        createdAt
                        updatedAt
                      }
                    }
                  }
                }
              }
            `;

            let comments = [];
            try {
              const commentsResult = await github.graphql(commentsQuery, {
                owner: context.repo.owner,
                name: context.repo.repo,
                number: Number(discussionNumber)
              });
              
              comments = commentsResult.repository.discussion.comments.nodes || [];
              core.info(`Found ${comments.length} comments for discussion #${discussionNumber}`);
            } catch (error) {
              core.warning(`Failed to fetch comments: ${error.message}`);
            }

            // Combine discussion body with comments for AI processing
            let fullContent = discussion.body;
            if (comments.length > 0) {
              fullContent += '\n\n--- DISCUSSION COMMENTS ---\n\n';
              comments.forEach((comment, index) => {
                fullContent += `**Comment ${index + 1} by @${comment.author.login} (${comment.createdAt}):**\n`;
                fullContent += comment.body + '\n\n';
              });
            }


            core.setOutput('number', discussion.number);
            core.setOutput('title', discussion.title);
            core.setOutput('body', discussion.body);
            core.setOutput('full_content', fullContent);
            core.setOutput('comments_count', comments.length);
            core.setOutput('labels', JSON.stringify(discussion.labels || []));
            core.setOutput('author', discussion.user.login);
            core.setOutput('url', discussion.html_url);

      - name: Validate discussion data
        env:
          DISCUSSION_NUMBER: ${{ steps.discussion.outputs.number }}
          DISCUSSION_TITLE: ${{ steps.discussion.outputs.title }}
          DISCUSSION_BODY: ${{ steps.discussion.outputs.body }}
          DISCUSSION_AUTHOR: ${{ steps.discussion.outputs.author }}
          DISCUSSION_URL: ${{ steps.discussion.outputs.url }}
        run: npm run validate-discussion

      - name: Determine document types
        id: doc-types
        run: |
          echo "document_types=summary" >> $GITHUB_OUTPUT

      - name: Generate documentation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOC_TYPE: summary
          SOURCE_MODULES: ${{ github.event.inputs.source || 'discussion' }}
          PR_NUMBERS: ${{ github.event.inputs.pr_numbers }}
          JIRA_KEYS: ${{ github.event.inputs.jira_keys }}
          ISSUE_NUMBERS: ${{ github.event.inputs.issue_numbers }}
          DISCUSSION_NUMBER: ${{ steps.discussion.outputs.number }}
          DISCUSSION_TITLE: ${{ steps.discussion.outputs.title }}
          DISCUSSION_BODY: ${{ steps.discussion.outputs.body }}
          DISCUSSION_AUTHOR: ${{ steps.discussion.outputs.author }}
          DISCUSSION_URL: ${{ steps.discussion.outputs.url }}
        run: |
          npm run generate-document

      - name: Ensure labels exist
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const labels = [
              { name: 'documentation', color: '0075ca', description: 'Documentation updates' },
              { name: 'automated', color: '5319e7', description: 'Created by automation' },
              { name: 'chroniclr', color: '0e8a16', description: 'Chroniclr generated' },
            ];

            for (const l of labels) {
              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: l.name,
                });
              } catch (e) {
                if (e.status === 404) {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: l.name,
                    color: l.color,
                    description: l.description,
                  });
                  core.info(`Created label: ${l.name}`);
                }
              }
            }

      - name: Create Pull Request
        if: success()
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'ðŸ“š Generate documentation via Chroniclr'
          title: 'ðŸ“š Update documentation via Chroniclr'
          body: |
            ## Automated Documentation Update

            This PR contains documentation automatically generated by Chroniclr.

            **Discussion:** Multi-source generation
            **Author:** system
            **Data Sources:** ${{ github.event.inputs.source || 'discussion' }}
            **Comments Processed:** 0

            ### Changes
            - Generated comprehensive documentation using AI (GitHub Models GPT-4o)
            - Applied appropriate templates for document types  
            - Extracted key information, decisions, and stakeholder input
            - AI-organized output in topic-based folders

            ---
            ðŸ¤– *This PR was automatically created by Chroniclr*
          branch: docs/chroniclr-${{ github.run_number }}
          delete-branch: true
          labels: |
            documentation
            automated
            chroniclr
