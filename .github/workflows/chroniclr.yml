name: Chroniclr Documentation Generator

on:
  discussion:
    types: [created, edited]

  workflow_dispatch:
    inputs:
      discussion_number:
        description: 'Discussion number to process'
        required: true
        type: string

permissions:
  contents: write
  discussions: read
  pull-requests: write
  issues: write
  models: read

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    concurrency:
      group: chroniclr-docs-${{ github.event_name }}-${{ github.event.discussion.number || github.event.inputs.discussion_number || 'manual' }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get discussion details
        id: discussion
        uses: actions/github-script@v7
        with:
          script: |
            const discussionNumber = context.payload.discussion?.number || 
                                    context.payload.inputs?.discussion_number;

            if (!discussionNumber) {
              core.setFailed('No discussion number found');
              return;
            }

            // Get discussion details
            const { data: discussion } = await github.request(
              'GET /repos/{owner}/{repo}/discussions/{discussion_number}',
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                discussion_number: Number(discussionNumber)
              }
            );

            // Get discussion comments using GraphQL
            const commentsQuery = `
              query($owner: String!, $name: String!, $number: Int!) {
                repository(owner: $owner, name: $name) {
                  discussion(number: $number) {
                    comments(first: 50) {
                      nodes {
                        author {
                          login
                        }
                        body
                        createdAt
                        updatedAt
                      }
                    }
                  }
                }
              }
            `;
            
            let comments = [];
            try {
              const commentsResult = await github.graphql(commentsQuery, {
                owner: context.repo.owner,
                name: context.repo.repo,
                number: Number(discussionNumber)
              });
              
              comments = commentsResult.repository.discussion.comments.nodes || [];
              core.info(`Found ${comments.length} comments for discussion #${discussionNumber}`);
            } catch (error) {
              core.warning(`Failed to fetch comments: ${error.message}`);
            }

            // Combine discussion body with comments for AI processing
            let fullContent = discussion.body;
            if (comments.length > 0) {
              fullContent += '\n\n--- DISCUSSION COMMENTS ---\n\n';
              comments.forEach((comment, index) => {
                fullContent += `**Comment ${index + 1} by @${comment.author.login} (${comment.createdAt}):**\n`;
                fullContent += comment.body + '\n\n';
              });
            }

            core.setOutput('number', discussion.number);
            core.setOutput('title', discussion.title);
            core.setOutput('body', discussion.body);
            core.setOutput('full_content', fullContent);
            core.setOutput('comments_count', comments.length);
            core.setOutput('labels', JSON.stringify(discussion.labels || []));
            core.setOutput('author', discussion.user.login);
            core.setOutput('url', discussion.html_url);

      - name: Validate discussion data
        env:
          DISCUSSION_NUMBER: ${{ steps.discussion.outputs.number }}
          DISCUSSION_TITLE: ${{ steps.discussion.outputs.title }}
          DISCUSSION_BODY: ${{ steps.discussion.outputs.body }}
          DISCUSSION_AUTHOR: ${{ steps.discussion.outputs.author }}
          DISCUSSION_URL: ${{ steps.discussion.outputs.url }}
        run: npm run validate-discussion

      - name: Determine document types
        id: doc-types
        env:
          DISCUSSION_LABELS: ${{ steps.discussion.outputs.labels }}
        run: npm run process-labels

      - name: Generate documentation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOC_TYPES: ${{ steps.doc-types.outputs.document_types }}
          DISCUSSION_NUMBER: ${{ steps.discussion.outputs.number }}
          DISCUSSION_TITLE: ${{ steps.discussion.outputs.title }}
          DISCUSSION_BODY: ${{ steps.discussion.outputs.full_content }}
          DISCUSSION_AUTHOR: ${{ steps.discussion.outputs.author }}
          DISCUSSION_URL: ${{ steps.discussion.outputs.url }}
          COMMENTS_COUNT: ${{ steps.discussion.outputs.comments_count }}
        run: |
          echo "Processing discussion with $COMMENTS_COUNT comments"
          for doc_type in $DOC_TYPES; do
            DOC_TYPE=$doc_type npm run generate-document
          done

      - name: Create GitHub issues for action items
        id: action-items
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISCUSSION_NUMBER: ${{ steps.discussion.outputs.number }}
          DISCUSSION_TITLE: ${{ steps.discussion.outputs.title }}
          DISCUSSION_BODY: ${{ steps.discussion.outputs.full_content }}
          DISCUSSION_AUTHOR: ${{ steps.discussion.outputs.author }}
          DISCUSSION_URL: ${{ steps.discussion.outputs.url }}
        run: npm run create-action-items

      - name: Ensure labels exist
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const labels = [
              { name: 'documentation', color: '0075ca', description: 'Documentation updates' },
              { name: 'automated', color: '5319e7', description: 'Created by automation' },
              { name: 'chroniclr', color: '0e8a16', description: 'Chroniclr generated' },
            ];

            for (const l of labels) {
              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: l.name,
                });
                await github.rest.issues.updateLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: l.name,
                  new_name: l.name,
                  color: l.color,
                  description: l.description,
                });
                core.info(`Updated label: ${l.name}`);
              } catch (e) {
                if (e.status === 404) {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: l.name,
                    color: l.color,
                    description: l.description,
                  });
                  core.info(`Created label: ${l.name}`);
                } else {
                  throw e;
                }
              }
            }

      - name: Create Pull Request
        id: cpr
        continue-on-error: true
        if: success()
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'ðŸ“š Generate documentation for discussion #${{ steps.discussion.outputs.number }}'
          title: 'ðŸ“š Update documentation from discussion #${{ steps.discussion.outputs.number }}'
          body: |
            ## Automated Documentation Update

            This PR contains documentation automatically generated from GitHub discussion #${{ steps.discussion.outputs.number }}.

            **Discussion:** [${{ steps.discussion.outputs.title }}](${{ steps.discussion.outputs.url }})
            **Author:** @${{ steps.discussion.outputs.author }}
            **Generated Documents:** ${{ steps.doc-types.outputs.document_types }}
            **Comments Processed:** ${{ steps.discussion.outputs.comments_count }}
            **Action Items Created:** ${{ steps.action-items.outputs.issues_created || 0 }} GitHub issues

            ### Changes
            - Generated comprehensive documentation based on full discussion thread
            - Applied appropriate templates for document types  
            - Extracted key information, decisions, and stakeholder input
            - Automatically created GitHub issues for action items with assignments

            ### Action Items Processed
            ${{ steps.action-items.outputs.message || 'No action items found in discussion' }}

            ---
            ðŸ¤– *This PR was automatically created by Chroniclr*
          branch: docs/chroniclr-${{ steps.discussion.outputs.number }}
          delete-branch: true
          labels: |
            documentation
            automated
            chroniclr

      - name: Summarize PR creation
        if: always()
        run: |
          if [ -n "${{ steps.cpr.outputs.pull-request-url }}" ]; then
            {
              echo "PR created or updated successfully."
              echo
              echo "Branch: docs/chroniclr-${{ steps.discussion.outputs.number }}"
              echo "URL: ${{ steps.cpr.outputs.pull-request-url }}"
            } >> "$GITHUB_STEP_SUMMARY"
          else
            {
              echo "GitHub Actions could not create a PR (policy or permissions)."
              echo
              echo "Create it manually:"
              echo "https://github.com/${{ github.repository }}/pull/new/docs/chroniclr-${{ steps.discussion.outputs.number }}"
            } >> "$GITHUB_STEP_SUMMARY"
          fi
